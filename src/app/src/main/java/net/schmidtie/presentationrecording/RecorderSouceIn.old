package net.schmidtie.presentationrecording;


import android.content.Context;
import android.graphics.SurfaceTexture;
import android.os.Handler;
import android.os.Message;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.TextureView;
import android.view.View;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.TextView;

import com.realtek.hardware.RtkHDMIRxManager;

public class RecorderSouceIn  extends RecorderAbstraction {
    private static final int CLOSESOUND = 1;
    private static final int DISPLAY = 0;
    private static final int DISPLAYTIME = 200;
    private static final int HDCP = 3;
    private static final String TAG = "SouceInReconder";
    private static final int TYPE_NOPREVIEW = 2;
    private static final int TYPE_SURFACEVIEW = 0;
    private static final int TYPE_TEXTUREVIEW = 1;
    private static final int UDPRESULT = 2;
    public FloatingWindowSurfaceCallback mCallback = null;
    private Context mContext = null;
    private FloatingWindowView mFloatingView = null;
    private int mFps = 0;
    private RtkHDMIRxManager mHDMIRX = null;
    private Handler mHandler = null;
    private int mHeight = 0;
    private boolean mIsPlaying = false;
    public FloatingWindowTextureListener mListener = null;
    public View mPreview = null;
    private boolean mPreviewOn = false;
    private int mRecordFrameRate = 0;
    private int mScanMode = 0;
    private TextView mSigleView = null;
    private ImageView mStatusView = null;
    private SurfaceHolder mSurfaceHolder = null;
    public SurfaceTexture mSurfaceTextureForNoPreview = null;
    private SurfaceView mSurfaceView = null;
    public TextureView mTextureView = null;
    private UdpTool mUdpTool = null;
    private int mViewType = 0;
    private int mWidth = 0;
    private WindowManager mWindowManager = null;
    public WindowManager.LayoutParams wmParams = null;

    class C02861 extends Handler {
        C02861() {
        }

        public void handleMessage(Message message) {
            switch (message.what) {
                case 0:
                    if (RecorderSouceIn.this.isHdmiConnect()) {
                        RecorderSouceIn.this.play();
                        return;
                    }
                    return;
                case 1:
                    if (RecorderSouceIn.this.isPip()) {
                        RecorderSouceIn.this.togglePreview(true, SettingsTool.isPipSound(RecorderSouceIn.this.mContext));
                        return;
                    } else {
                        RecorderSouceIn.this.togglePreview(false, false);
                        return;
                    }
                case 2:
                    if (((Boolean) message.obj).booleanValue()) {
                        RecorderSouceIn.this.setUdping(true);
                        RecorderSouceIn.this.mUdpTool.writUdp();
                        if (RecorderSouceIn.this.mRecoderListener != null) {
                            RecorderSouceIn.this.mRecoderListener.startUdp();
                        }
                        if (!RecorderSouceIn.this.isActivityDisPlay()) {
                            MyToast.toast(RecorderSouceIn.this.mContext, RecorderSouceIn.this.mContext.getString(C0248R.string.start_udp_hint));
                            return;
                        }
                        return;
                    }
                    RecorderSouceIn.this.stopUdpStream();
                    if (RecorderSouceIn.this.mRecoderListener != null) {
                        RecorderSouceIn.this.mRecoderListener.errorUdp();
                    }
                    if (!RecorderSouceIn.this.isActivityDisPlay()) {
                        MyToast.toast(RecorderSouceIn.this.mContext, RecorderSouceIn.this.mContext.getString(C0248R.string.stop_udp_hint));
                        return;
                    }
                    return;
                case 3:
                    RecorderSouceIn.this.showHdcpDiaolog();
                    return;
                default:
                    return;
            }
        }
    }

    class C02872 implements Runnable {
        C02872() {
        }

        public void run() {
            try {
                if (RecorderSouceIn.this.prepreUdp(RecorderSouceIn.this.isUdp())) {
                    RecorderSouceIn.this.mHandler.obtainMessage(2, Boolean.valueOf(true)).sendToTarget();
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            RecorderSouceIn.this.mHandler.obtainMessage(2, Boolean.valueOf(false)).sendToTarget();
        }
    }

    class C02883 implements HintDialogListener {
        C02883() {
        }

        public void leftOnclick(Dialog dialog, View view) {
            dialog.dismiss();
        }

        public void rightOnclick(Dialog dialog, View view) {
            dialog.dismiss();
        }
    }

    class FloatingWindowSurfaceCallback implements Callback {
        FloatingWindowSurfaceCallback() {
        }

        public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
        }

        public void surfaceCreated(SurfaceHolder surfaceHolder) {
            MyLog.m18v(RecorderSouceIn.TAG, "SurfaceHolder surfaceCreated");
            RecorderSouceIn.this.mPreviewOn = true;
        }

        public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
            MyLog.m18v(RecorderSouceIn.TAG, "SurfaceHolder surfaceDestroyed");
            RecorderSouceIn.this.mPreviewOn = false;
        }
    }

    class FloatingWindowTextureListener implements SurfaceTextureListener {
        FloatingWindowTextureListener() {
        }

        public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int i, int i2) {
            RecorderSouceIn.this.mPreviewOn = true;
            MyLog.m18v(RecorderSouceIn.TAG, "SurfaceTextureListener onSurfaceTextureAvailable");
        }

        public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
            MyLog.m18v(RecorderSouceIn.TAG, "SurfaceTextureListener onSurfaceTextureDestroyed");
            RecorderSouceIn.this.mPreviewOn = false;
            return true;
        }

        public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int i, int i2) {
        }

        public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
        }
    }

    public RecorderSouceIn(Context context) {
        super(context, 2);
        this.mContext = context;
        init();
    }

    private void createFloatingWindow(int i, int i2, int i3, int i4) {
        int i5 = 8;
        this.mWindowManager = (WindowManager) this.mContext.getSystemService("window");
        this.mFloatingView = (FloatingWindowView) View.inflate(this.mContext, C0248R.layout.floatingwindow, null);
        this.mSigleView = (TextView) this.mFloatingView.findViewById(C0248R.id.home_ac_surfaceview_no_sigle);
        this.mFloatingView.mNoHdmiSignalView = this.mSigleView;
        this.mFloatingView.mLeftTopHintView = (ImageView) this.mFloatingView.findViewById(C0248R.id.floating_recording_hint_left_top);
        this.mFloatingView.mLeftBottomHintView = (ImageView) this.mFloatingView.findViewById(C0248R.id.floating_recording_hint_left_bottom);
        this.mFloatingView.mRightTopHintView = (ImageView) this.mFloatingView.findViewById(C0248R.id.floating_recording_hint_right_top);
        this.mFloatingView.mRightBottomHintView = (ImageView) this.mFloatingView.findViewById(C0248R.id.floating_recording_hint_right_bottom);
        this.mFloatingView.setOperateView(this.mFloatingView.findViewById(C0248R.id.floating_recording_operate_view), this);
        this.mStatusView = (ImageView) this.mFloatingView.findViewById(C0248R.id.floating_recording_icon);
        ViewGroup viewGroup = (ViewGroup) this.mFloatingView.findViewById(C0248R.id.floating_surfaceview);
        if (SettingsTool.isSigleHit(this.mContext)) {
            TextView textView = this.mSigleView;
            if (!isHdmiConnect()) {
                i5 = 0;
            }
            textView.setVisibility(i5);
        } else {
            this.mSigleView.setVisibility(8);
        }
        if (this.mViewType == 0) {
            this.mSurfaceView = new SurfaceView(this.mContext);
            this.mSurfaceHolder = this.mSurfaceView.getHolder();
            this.mCallback = new FloatingWindowSurfaceCallback();
            this.mSurfaceHolder.addCallback(this.mCallback);
            this.mPreview = this.mSurfaceView;
        } else if (this.mViewType == 1) {
            this.mTextureView = new TextureView(this.mContext);
            this.mListener = new FloatingWindowTextureListener();
            this.mTextureView.setSurfaceTextureListener(this.mListener);
            this.mPreview = this.mTextureView;
        } else {
            this.mSurfaceTextureForNoPreview = new SurfaceTexture(-12348);
        }
        if (this.mViewType != 2) {
            this.mPreview.setLayoutParams(new RelativeLayout.LayoutParams(-1, -1));
            viewGroup.addView(this.mPreview);
            if (!isHdmiConnect()) {
                this.mPreview.setVisibility(4);
            }
        }
        this.wmParams = new LayoutParams(i3, i4, 2005, 2584, -3);
        this.wmParams.x = i;
        this.wmParams.y = i2;
        this.wmParams.gravity = 51;
        this.mFloatingView.setBackgroundColor(ViewCompat.MEASURED_STATE_MASK);
        try {
            this.mFloatingView.setSystemUiVisibility(5894);
        } catch (Exception e) {
            e.printStackTrace();
        }
        this.mWindowManager.addView(this.mFloatingView, this.wmParams);
    }

    private int getSupportedPreviewFrameRate(HDMIRxParameters hDMIRxParameters) {
        List supportedPreviewFrameRates = hDMIRxParameters.getSupportedPreviewFrameRates();
        int intValue = (supportedPreviewFrameRates == null || supportedPreviewFrameRates.size() <= 0) ? 30 : ((Integer) supportedPreviewFrameRates.get(supportedPreviewFrameRates.size() - 1)).intValue();
        MyLog.m18v(TAG, "input = fps = " + intValue);
        return intValue;
    }

    private void getSupportedPreviewSize(HDMIRxParameters hDMIRxParameters, int i, int i2) {
        List supportedPreviewSizes = hDMIRxParameters.getSupportedPreviewSizes();
        if (supportedPreviewSizes != null && supportedPreviewSizes.size() > 0) {
            int i3 = 0;
            int i4 = 0;
            int i5 = 0;
            while (i3 < supportedPreviewSizes.size()) {
                if (supportedPreviewSizes.get(i3) != null && i == ((Size) supportedPreviewSizes.get(i3)).width) {
                    i5 = ((Size) supportedPreviewSizes.get(i3)).width;
                    i4 = ((Size) supportedPreviewSizes.get(i3)).height;
                    if (i2 == ((Size) supportedPreviewSizes.get(i3)).height) {
                        break;
                    }
                }
                i3++;
            }
            int i6 = i4;
            i3 = i5;
            if (i3 == 0 && i6 == 0 && supportedPreviewSizes.get(supportedPreviewSizes.size() - 1) != null) {
                i3 = ((Size) supportedPreviewSizes.get(supportedPreviewSizes.size() - 1)).width;
                i6 = ((Size) supportedPreviewSizes.get(supportedPreviewSizes.size() - 1)).height;
            }
            this.mWidth = i3;
            this.mHeight = i6;
            MyLog.m18v(TAG, "input = mWidth = " + this.mWidth + "  mHeight = " + this.mHeight);
            if (SettingsTool.isResolutionMax(this.mContext) && this.mWidth > 1920) {
                this.mWidth = 1920;
                this.mHeight = 1080;
            }
        }
    }

    private void init() {
        this.mUdpTool = new UdpTool(this.mContext, this);
        this.mHandler = new C02861();
    }

    private boolean isHdcp() {
        this.mHandler.removeMessages(3);
        if (!Util.isHdcp()) {
            return false;
        }
        this.mHandler.sendEmptyMessage(3);
        return true;
    }

    private boolean prepreUdp(boolean z) {
        try {
            MyLog.m18v(TAG, "startRecorder");
            if (!this.mIsPlaying || isHdcp()) {
                return false;
            }
            if (!z) {
                cloneRecorderInfo();
            }
            setUdpFlag(false);
            Thread.sleep(200);
            RecordInfo currentRecordInfo = getCurrentRecordInfo();
            currentRecordInfo.mCurrentRecordFrameRate = this.mRecordFrameRate;
            ParcelFileDescriptor prepareIO = this.mUdpTool.prepareIO(currentRecordInfo);
            if (prepareIO == null) {
                MyLog.m18v(TAG, "pfd == null");
                return false;
            }
            ResolutionInfo resolution = getResolution(currentRecordInfo.mResolution == 0 ? 1 : currentRecordInfo.mResolution);
            int intValue = Integer.valueOf(currentRecordInfo.getChannelCount(this.mContext)[currentRecordInfo.mChannelCount]).intValue();
            int intValue2 = Integer.valueOf(currentRecordInfo.getSampleRate(this.mContext)[currentRecordInfo.mSampleRate]).intValue();
            int i = 441;
            if (intValue2 % 8000 == 0) {
                i = 480;
            }
            i = ((intValue * 640) * intValue2) / i;
            int i2 = currentRecordInfo.getBitRateValues(this.mContext)[currentRecordInfo.mBitRate];
            MyLog.m17v("w = " + resolution.mWidth + "  h = " + resolution.mHeight);
            this.mHDMIRX.configureTargetFormat(new VideoConfig(resolution.mWidth, resolution.mHeight, i2), new AudioConfig(intValue, intValue2, i));
            this.mHDMIRX.setTargetFd(prepareIO, 0);
            this.mHDMIRX.setTranscode(true);
            savePar(currentRecordInfo);
            return true;
        } catch (Exception e) {
            MyLog.m18v(TAG, "error = " + e.getMessage());
            return false;
        }
    }

    private void savePar(RecordInfo recordInfo) {
        MyLog.m18v(TAG, "savePar-");
        RecordInfo recordInfo2 = getRecordInfo();
        if (recordInfo.mUDPType == 1) {
            ValuesSaveTool.setString(this.mContext, ValuesSaveTool.BROADCAST_PORT, recordInfo.mPort);
            recordInfo2.mBroadcasePort = recordInfo.mPort;
        } else if (recordInfo.mUDPType == 0) {
            ValuesSaveTool.setString(this.mContext, ValuesSaveTool.MULTICAST_IP, recordInfo.mIp);
            ValuesSaveTool.setString(this.mContext, ValuesSaveTool.MULTICAST_PORT, recordInfo.mPort);
            recordInfo2.mMulticastIp = recordInfo.mIp;
            recordInfo2.mMulticastPort = recordInfo.mPort;
        } else {
            ValuesSaveTool.setString(this.mContext, ValuesSaveTool.UNICAST_IP, recordInfo.mIp);
            ValuesSaveTool.setString(this.mContext, ValuesSaveTool.UNICAST_PORT, recordInfo.mPort);
            recordInfo2.mOnetIp = recordInfo.mIp;
            recordInfo2.mPort = recordInfo.mPort;
        }
    }

    private void setwindowDis(int i, int i2, int i3, int i4, boolean z) {
        if (this.mWindowManager != null) {
            MyLog.m17v("x = " + i + " y = " + i2 + " w = " + i3 + " h = " + i4 + " ispip = " + z);
            int i5 = z ? 2568 : 2584;
            this.mFloatingView.setMove(z);
            this.wmParams = new LayoutParams(i3, i4, 2005, i5, -3);
            this.wmParams.x = i;
            this.wmParams.y = i2;
            this.wmParams.gravity = 51;
            this.mWindowManager.updateViewLayout(this.mFloatingView, this.wmParams);
        }
    }

    private void showHdcpDiaolog() {
        HintDialog.getHintDialog(this.mContext, this.mContext.getString(C0248R.string.tip), this.mContext.getString(C0248R.string.operation_msg), this.mContext.getString(C0248R.string.txt_ok), new C02883());
    }

    public void continueRecorder() {
        try {
            if (this.mHDMIRX != null) {
                this.mHDMIRX.setTranscode(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void hdmiConncet(boolean z) {
        int i = 8;
        if (SettingsTool.isSigleHit(this.mContext)) {
            if (this.mSigleView != null) {
                TextView textView = this.mSigleView;
                if (!z) {
                    i = 0;
                }
                textView.setVisibility(i);
            }
        } else if (this.mSigleView != null) {
            this.mSigleView.setVisibility(8);
        }
        if (z) {
            play();
        } else {
            stop();
        }
    }

    public boolean isHdmiDisplay() {
        return this.mIsPlaying;
    }

    public boolean isPrepare() {
        if (this.mIsPlaying || isActivityDisPlay() || this.mWindowManager != null) {
            return true;
        }
        createFloatingWindow(5000, 5000, 720, 480);
        this.mFloatingView.setMove(false);
        play();
        return false;
    }

    public boolean play() {
        if (this.mWindowManager == null) {
            return false;
        }
        this.mPreview.setVisibility(0);
        this.mHandler.removeMessages(0);
        MyLog.m17v("play------------- mIsPlaying = " + this.mIsPlaying + " mPreviewOn = " + this.mPreviewOn);
        if (!this.mIsPlaying && this.mPreviewOn) {
            this.mHDMIRX = new RtkHDMIRxManager();
            HDMIRxStatus hDMIRxStatus = this.mHDMIRX.getHDMIRxStatus();
            if (hDMIRxStatus == null || hDMIRxStatus.status != 1) {
                this.mHandler.sendEmptyMessageDelayed(0, 200);
                return false;
            } else if (this.mHDMIRX.open() != 0) {
                this.mWidth = 0;
                this.mHeight = 0;
                this.mHDMIRX = null;
                this.mHandler.sendEmptyMessageDelayed(0, 200);
                return false;
            } else {
                HDMIRxParameters parameters = this.mHDMIRX.getParameters();
                getSupportedPreviewSize(parameters, hDMIRxStatus.width, hDMIRxStatus.height);
                this.mFps = getSupportedPreviewFrameRate(parameters);
                this.mScanMode = hDMIRxStatus.scanMode;
                try {
                    if (this.mViewType == 0) {
                        this.mHDMIRX.setPreviewDisplay(this.mSurfaceHolder);
                    } else if (this.mViewType == 1) {
                        this.mHDMIRX.setPreviewDisplay3(this.mTextureView.getSurfaceTexture());
                    } else {
                        this.mHDMIRX.setPreviewDisplay3(this.mSurfaceTextureForNoPreview);
                    }
                    parameters = new HDMIRxParameters();
                    MyLog.m18v(TAG, "hdmi setPreviewSize  mWidth = " + this.mWidth + "  mHeight = " + this.mHeight + "  mFps = " + this.mFps);
                    parameters.setPreviewSize(this.mWidth, this.mHeight);
                    this.mRecordFrameRate = this.mFps;
                    if (this.mFps == 60) {
                        this.mRecordFrameRate = 30;
                    } else if (this.mFps == 50) {
                        this.mRecordFrameRate = 25;
                    }
                    getRecordInfo().mCurrentRecordFrameRate = this.mRecordFrameRate;
                    parameters.setPreviewFrameRate(this.mRecordFrameRate);
                    this.mHDMIRX.setParameters(parameters);
                    this.mHDMIRX.play();
                    this.mIsPlaying = true;
                    MyLog.m18v(TAG, "hdmi mIsPlaying  successfull");
                    if (!isActivityDisPlay()) {
                        if (isPip()) {
                            togglePreview(true, SettingsTool.isPipSound(this.mContext));
                        } else {
                            togglePreview(false, false);
                        }
                        this.mHandler.sendEmptyMessageDelayed(1, 200);
                    }
                    if (this.mRecoderListener != null) {
                        this.mRecoderListener.disPlay(true, this.mWidth, this.mHeight, this.mFps);
                    }
                } catch (Exception e) {
                    stop();
                    e.printStackTrace();
                    MyLog.m16e(TAG, "play erro = " + e.getMessage());
                }
                return true;
            }
        } else if (this.mPreviewOn) {
            return false;
        } else {
            this.mHandler.sendEmptyMessageDelayed(0, 200);
            return false;
        }
    }

    public void release() {
        MyLog.m18v(TAG, "release()------------------");
        if (isPip()) {
            this.mStatusView.setVisibility(8);
            this.mFloatingView.setSize(FloatingWindowView.getPIPW(this.mContext));
            togglePreview(true, SettingsTool.isPipSound(this.mContext));
            setwindowDis(FloatingWindowView.getPIPX(this.mContext), FloatingWindowView.getPIPY(this.mContext), FloatingWindowView.getPIPW(this.mContext), FloatingWindowView.getPIPH(this.mContext), true);
            MyToast.toast(this.mContext, this.mContext.getString(C0248R.string.pip_hint), 1);
        } else if (isRecord() || isUdp()) {
            this.mStatusView.setVisibility(8);
            togglePreview(false, false);
            this.mFloatingView.setHdmiDisPlay(false);
        } else {
            try {
                stop();
                if (!(this.mViewType != 0 || this.mSurfaceView == null || this.mSurfaceHolder == null || this.mCallback == null)) {
                    this.mSurfaceHolder.removeCallback(this.mCallback);
                }
                if (!(this.mWindowManager == null || this.mFloatingView == null)) {
                    this.mWindowManager.removeView(this.mFloatingView);
                    this.mFloatingView = null;
                    this.mWindowManager = null;
                }
                this.mContext.stopService(new Intent(this.mContext, RecorderService.class));
                MyLog.m17v("stopService RecorderService successfull");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void repeatDisPlay() {
        stop();
        this.mHandler.removeMessages(0);
        this.mHandler.sendEmptyMessageDelayed(0, 1200);
    }

    public void setSurfaceViewRootView(int i, int i2, int i3, int i4) {
        if (this.mWindowManager == null) {
            createFloatingWindow(i, i2, i3, i4);
        } else {
            setwindowDis(i, i2, i3, i4, false);
        }
        this.mFloatingView.initDis();
        if (isPip()) {
            this.mStatusView.setVisibility(0);
            this.mStatusView.setImageResource(C0248R.drawable.pip_re);
        } else {
            this.mStatusView.setVisibility(8);
        }
        if (i3 == 1920) {
            this.mStatusView.setVisibility(8);
            this.mSigleView.setTextSize(2, 48.0f);
        } else {
            this.mSigleView.setTextSize(2, 35.0f);
        }
        if (this.mIsPlaying) {
            if (this.mRecoderListener != null) {
                this.mRecoderListener.disPlay(true, this.mWidth, this.mHeight, this.mFps);
            }
        } else if (this.mRecoderListener != null) {
            this.mRecoderListener.disPlay(false, 0, 0, 0);
        }
        if (isHdmiConnect() && !this.mIsPlaying) {
            play();
        }
        togglePreview(true, true);
    }

    public boolean startDisPlayHdmi() {
        if (this.mFloatingView != null) {
            this.mFloatingView.setHdmiDisPlay(true);
        }
        togglePreview(true, true);
        if (Util.isHdcp()) {
            stop();
            play();
        }
        return false;
    }

    public void startPip() {
        if (!isActivityDisPlay()) {
            if (this.mWindowManager != null) {
                togglePreview(true, SettingsTool.isPipSound(this.mContext));
            } else {
                setSurfaceViewRootView(FloatingWindowView.getPIPX(this.mContext), FloatingWindowView.getPIPY(this.mContext), FloatingWindowView.getPIPW(this.mContext), FloatingWindowView.getPIPH(this.mContext));
            }
            setwindowDis(FloatingWindowView.getPIPX(this.mContext), FloatingWindowView.getPIPY(this.mContext), FloatingWindowView.getPIPW(this.mContext), FloatingWindowView.getPIPH(this.mContext), true);
            if (this.mStatusView != null) {
                this.mStatusView.setVisibility(8);
            }
        } else if (this.mStatusView != null) {
            this.mStatusView.setVisibility(0);
            this.mStatusView.setImageResource(C0248R.drawable.pip_re);
        }
        setPip(true);
        if (this.mRecoderListener != null) {
            this.mRecoderListener.startPip();
        }
    }

    public boolean startRecorder(boolean z) {
        try {
            MyLog.m18v(TAG, "startRecorder");
            if (this.mIsPlaying) {
                if (!isHdcp()) {
                    if (!z) {
                        cloneRecorderInfo();
                    }
                    RecordInfo currentRecordInfo = getCurrentRecordInfo();
                    ResolutionInfo resolution = getResolution(currentRecordInfo.mResolution == 0 ? 1 : currentRecordInfo.mResolution);
                    int intValue = Integer.valueOf(currentRecordInfo.getChannelCount(this.mContext)[currentRecordInfo.mChannelCount]).intValue();
                    int intValue2 = Integer.valueOf(currentRecordInfo.getSampleRate(this.mContext)[currentRecordInfo.mSampleRate]).intValue();
                    int i = 441;
                    if (intValue2 % 8000 == 0) {
                        i = 480;
                    }
                    i = ((intValue * 640) * intValue2) / i;
                    int i2 = currentRecordInfo.getBitRateValues(this.mContext)[currentRecordInfo.mBitRate];
                    MyLog.m17v("isContinueRecorder = " + z + "   w = " + resolution.mWidth + "  h = " + resolution.mHeight);
                    VideoConfig videoConfig = new VideoConfig(resolution.mWidth, resolution.mHeight, i2);
                    MyLog.m17v("AudioConfig channelCount = " + intValue + "   sampleRate = " + intValue2 + "  audioBitrate = " + i);
                    this.mHDMIRX.configureTargetFormat(videoConfig, new AudioConfig(intValue, intValue2, i));
                    if (!z) {
                        currentRecordInfo.mCurrentRecordFileName = "VID_" + new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()) + "_";
                    }
                    StringBuilder stringBuilder = new StringBuilder(String.valueOf(currentRecordInfo.mCurrentRecordFileName));
                    int i3 = currentRecordInfo.mRecoerFileIndex + 1;
                    currentRecordInfo.mRecoerFileIndex = i3;
                    String str = currentRecordInfo.mPath + File.separator + stringBuilder.append(i3).toString() + (currentRecordInfo.mOutputFormat == 0 ? ".ts" : ".mp4");
                    MyLog.m18v(TAG, "VID path = " + str);
                    currentRecordInfo.mCurrentRecordFilePath = str;
                    File file = new File(str);
                    file.createNewFile();
                    ZidooFileTool.execMethod(str);
                    this.mHDMIRX.setTargetFd(ParcelFileDescriptor.open(file, 939524096), currentRecordInfo.mOutputFormat == 0 ? 0 : 1);
                    this.mHDMIRX.setTranscode(true);
                    if (!z) {
                        setRecording(true);
                    }
                    if (this.mRecoderListener != null) {
                        this.mRecoderListener.startRecord();
                    }
                    return true;
                } else if (this.mRecoderListener == null) {
                    return false;
                } else {
                    this.mRecoderListener.errorRecord();
                    return false;
                }
            } else if (this.mRecoderListener == null) {
                return false;
            } else {
                this.mRecoderListener.errorRecord();
                return false;
            }
        } catch (Exception e) {
            MyLog.m18v(TAG, "error = " + e.getMessage());
            if (this.mRecoderListener == null) {
                return false;
            }
            this.mRecoderListener.errorRecord();
            return false;
        }
    }

    public void startUdpStream() {
        new Thread(new C02872()).start();
    }

    public boolean stop() {
        if (this.mPreview != null) {
            this.mPreview.setVisibility(4);
        }
        boolean z = true;
        if (this.mHDMIRX != null) {
            this.mHDMIRX.stop();
            this.mHDMIRX.release();
            this.mHDMIRX = null;
        } else {
            z = false;
        }
        this.mIsPlaying = false;
        this.mFps = 0;
        this.mRecordFrameRate = 0;
        this.mWidth = 0;
        this.mHeight = 0;
        if (this.mRecoderListener != null) {
            this.mRecoderListener.disPlay(false, 0, 0, 0);
        }
        return z;
    }

    public boolean stopDisPlayHdmi() {
        MyLog.m18v(TAG, "stopDisPlayHdmi()------------------");
        if (this.mFloatingView != null) {
            this.mFloatingView.setHdmiDisPlay(false);
        }
        togglePreview(false, false);
        return false;
    }

    public boolean stopPip() {
        setPip(false);
        if (isActivityDisPlay()) {
            if (this.mStatusView != null) {
                this.mStatusView.setVisibility(8);
            }
            if (this.mRecoderListener != null) {
                this.mRecoderListener.stopPip();
            }
        } else {
            release();
        }
        return false;
    }

    public boolean stopRecorder() {
        MyLog.m18v(TAG, "stopRecorder");
        try {
            if (this.mIsPlaying && isRecord() && (isActivityDisPlay() || isPip() || isUdp())) {
                repeatDisPlay();
            }
            setRecording(false);
            try {
                if (this.mHDMIRX != null) {
                    this.mHDMIRX.setTranscode(false);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (!(isActivityDisPlay() || isPip() || isUdp())) {
                release();
            }
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        return false;
    }

    public boolean stopUdpStream() {
        MyLog.m18v(TAG, "stopUdpStream");
        try {
            if (this.mIsPlaying && isUdp() && (isActivityDisPlay() || isPip() || isRecord())) {
                repeatDisPlay();
            }
            setUdping(false);
            try {
                if (this.mHDMIRX != null) {
                    this.mHDMIRX.setTranscode(false);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (!(isActivityDisPlay() || isPip() || isRecord())) {
                release();
            }
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        return true;
    }

    public void togglePreview(boolean z, boolean z2) {
        if (this.mHDMIRX != null && this.mIsPlaying) {
            MyLog.m18v(TAG, "togglePreview videoEn = " + z + "  audioEn = " + z2);
            this.mHDMIRX.setPlayback(z, z2);
        }
    }
}

